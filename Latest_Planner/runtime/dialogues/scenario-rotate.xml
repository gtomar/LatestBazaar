<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scenario SYSTEM "TuTalkScenario.dtd">
<scenario default-language="en" scenario-name="scenario-template">
	<configuration>
		
		<!-- It *is* possible to hook up a LightSide classifier to TuTalk, 
		such that the predicted labels are treated as concepts. 
		but not today. -->

	</configuration>
	
	<!--
	Concept 1: Find substrings of the input string
	Concept 2: Concatenate them in the opposite order
	-->
		
	<concepts>
		<!-- this is a special kind of concept for catching unexpected student responses -->
		<concept label="unanticipated-response">
			<phrase>anything else</phrase>
		</concept>
		
		
		<!-- tutor concepts. -->
		<!-- the tutor will choose randomly between multiple phrases for a concept. -->	

		<concept label="introduction">
			<phrase>Optional introduction</phrase>
		</concept>
		
		<concept label="conclusion">
			<phrase>Good work. Why don't you go ahead and implement that. I'll be here if you want to discuss more.</phrase>
		</concept>
		
		<concept label="ask-concept-1">
			<phrase>How will you separate the character you want to move from the rest of the string?</phrase>
		</concept>
		
		<concept label="ask-concept-2">
			<phrase>Now what do you need to do to return the rotated string?</phrase>
		</concept>
		
		<concept label="concept-1-help">
			<phrase>A handy way to parse a string in Java is the substring method.
If you call s.substring(a,b) it gives you a string greater than or equal to index a and less than index b.
For example:
	"abcdef".substring(2,4) = "cd"</phrase>
		</concept>
		
		<concept label="concept-2-help">
			<phrase>The rotated string just means switching the first and second parts and putting them back together again.</phrase>
		</concept>
		
		<concept label="explain-concept-1">
			<phrase>You can call substring twice to get the two parts of the string.
	String a = s.substring(0,1); -> first letter of s
	String b = s.substring(1,s.length()); -> the rest of the string</phrase>
		</concept>
		
		<concept label="explain-concept-2">
			<phrase>To put the strings back together, you just need to concatenate them in the opposite order. For example:
	String c = b + a;
Then you can return the new string.</phrase>
		</concept>
		
		<concept label="ok">
			<phrase>Okay</phrase>
			<phrase>Good</phrase>
			<phrase>Great</phrase>
			<phrase>Correct!</phrase>
			<phrase>Wonderful</phrase>
			<phrase>Perfect</phrase>
			<phrase>Exactly</phrase>
			<phrase>You're right</phrase>
			<phrase>Spot on</phrase>
			<phrase>Good work</phrase>
			<phrase>That's correct</phrase>
			<phrase>Good job</phrase>
		</concept>
		
		<concept label="wrong">
			<phrase>Not quite...</phrase>
			<phrase>Almost...</phrase>
			<phrase>Sorry...</phrase>
			<phrase>Try again?</phrase>
		</concept>
		<!-- end tutor concepts. -->
		
		
		<!-- student concepts. -->
		
		<!-- these match against external (MessageAnnotator) annotations. -->
		<concept label="yes" type="annotation">
			<phrase>AFFIRMATIVE</phrase>
		</concept>
		
		<concept label="no" type="annotation">
			<phrase>NEGATIVE</phrase>
		</concept>
		
		<!-- these match against regular expressions. -->
		
		<concept label="concept-1-right-answer" type="annotation">
			<phrase>ROTATE_SUBSTRING</phrase>
		</concept>
		
		<concept label="concept-2-right-answer" type="annotation">
			<phrase>ROTATE_CONCAT</phrase>
		</concept>
		
		
		<!-- end student concepts. -->
		
	</concepts>
	
	
	<script>
		<goal name="start" difficulty="0">
			
			<!--   <step>-->
				<!-- OPTIONAL INTRODUCTION  -->
				<!--   <initiation>introduction</initiation>
			</step> -->
			
			<step>
				<!-- Every step begins with an initiating concept or literal phrase -->
				<initiation>ask-concept-1</initiation>
				
				<!-- These are the "response" options. 
					If the concept between the tags matches the student statement, 
				    the "say" concept/phrase will be delivered by the tutor.
				    "push" adds another goal to the dialogue's stack. 
					 Note that goals should NOT be recursively nested. -->
				
				<response push="concept_2" say="ok">concept-1-right-answer</response>
                
				<!-- unanticipated-response is special: it's anything that doesn't match one of the above. -->
				<response push="concept_1_help" say="wrong">unanticipated-response</response>
			</step>
			
			
			<step>
				<initiation>conclusion</initiation>
			</step>
		</goal>
		
		<!-- Goals are referenced by their names. "difficulty" is meaningless for now. -->
		
		<goal name="concept_2" difficulty="0">
			<step>
				<initiation>ask-concept-2</initiation>
                <response say="ok">concept-2-right-answer</response>
                <response push="concept_2_help" say="wrong">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_1_help" difficulty="0">
			<step>
				<initiation>concept-1-help</initiation>
				<response push="concept_2" say="ok">concept-1-right-answer</response>
				<response push="concept_2" say="explain-concept-1">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_2_help" difficulty="0">
			<step>
				<initiation>concept-2-help</initiation>
				<response say="ok">concept-2-right-answer</response>
				<response say="explain-concept-2">unanticipated-response</response>
			</step>
		</goal>
		
	</script>

</scenario>
