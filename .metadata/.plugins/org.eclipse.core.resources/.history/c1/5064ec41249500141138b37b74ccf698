package basilica2.myagent.listeners;

import java.util.ArrayList;
import java.util.HashMap;

import edu.cmu.cs.lti.basilica2.core.Event;
import basilica2.agents.components.InputCoordinator;
import basilica2.agents.events.MessageEvent;
import basilica2.agents.listeners.BasilicaPreProcessor;


public class PlanWatcher implements BasilicaPreProcessor
{
	
    
	private HashMap<String, Integer> myMap = new HashMap<String, Integer>();
    

	/**
	 * @param source the InputCoordinator - to push new events to. (Modified events don't need to be re-pushed).
	 * @param event an incoming event which matches one of this preprocessor's advertised classes (see getPreprocessorEventClasses)
	 * 
	 * Preprocess an incoming event, by modifying this event or creating a new event in response. 
	 * All original and new events will be passed by the InputCoordinator to the second-stage Reactors ("BasilicaListener" instances).
	 */
	@Override
	public void preProcessEvent(InputCoordinator source, Event event)
	{
		MessageEvent me = (MessageEvent)event;
		String[] annotations = me.getAllAnnotations();
		
		for (String s: annotations)
	    {
			if(myMap.containsKey(s)) // detect a repeated message
			{
				System.out.println(s);
			}
	    }
		

		

	}

	/**
	 * @return the classes of events that this Preprocessor cares about
	 */
	@Override
	public Class[] getPreprocessorEventClasses()
	{
		//only MessageEvents will be delivered to this watcher.
		return new Class[]{MessageEvent.class};
	}

}
