<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scenario SYSTEM "TuTalkScenario.dtd">
<scenario default-language="en" scenario-name="scenario-template">
	<configuration>
	
	<!-- 
	Concept 1: What should happen when the program gets an input of 9?
	Concept 2: What should happen when the program gets an input of 16?
	 -->
		
		<!-- It *is* possible to hook up a LightSide classifier to TuTalk, 
		such that the predicted labels are treated as concepts. 
		but not today. -->

	</configuration>
	
	<!-- 'Concepts' define things that students might say,
	     AND things that the tutor might say back. 
	     Tutor concepts should take the form of phrase lists.
		 Student concepts can be phrase lists, 
		 regular expressions, or lists of annotations,
	     but only one of these at a time. -->
		
	<concepts>
		<!-- this is a special kind of concept for catching unexpected student responses -->
		<concept label="unanticipated-response">
			<phrase>anything else</phrase>
		</concept>
		
		
		<!-- tutor concepts. -->
		<!-- the tutor will choose randomly between multiple phrases for a concept. -->	

		<concept label="introduction">
			<phrase>You saw in the instructions that if you input 0, it should print 2.</phrase>
		</concept>
		
		<concept label="conclusion">
			<phrase>Great! You can hit “Submit” at any time to see what your program does given these three inputs (0, 9, 16).</phrase>
		</concept>
		
		<concept label="ask-concept-1">
			<phrase>What happens if you input 9?</phrase>
		</concept>
		
		<concept label="ask-concept-2">
			<phrase>How about an input of 16?</phrase>
		</concept>
		
		<concept label="concept-1-help">
			<phrase>The instructions provide a list of Circular Primes. To find the 9th, just find the 9th item in the list. Don't forget to start counting with 0. Try again.</phrase>
		</concept>
		
		<concept label="concept-2-help">
			<phrase>The instructions provide a list of Circular Primes. To find the 16th, just find the 16th item in the list. Don't forget to start counting with 0. Try again.</phrase>
		</concept>
		
		<concept label="explain-concept-1">
			<phrase>Take a look at the list in the example. The 0th is 2, the 1st is 3, the 2nd is 5, etc. Using that, you can figure out that the 9th is 71.</phrase>
		</concept>
		
		<concept label="explain-concept-2">
			<phrase>Take a look at the list in the example. The 0th is 2, the 1st is 3, the 2nd is 5, etc. Using that, you can figure out that the 16th is 199.</phrase>
		</concept>
		
		<concept label="ok">
			<phrase>Okay</phrase>
			<phrase>Good</phrase>
			<phrase>Great</phrase>
			<phrase>Correct!</phrase>
			<phrase>Wonderful</phrase>
			<phrase>Perfect</phrase>
			<phrase>Exactly</phrase>
			<phrase>You're right</phrase>
			<phrase>Spot on</phrase>
			<phrase>Good work</phrase>
			<phrase>That's correct</phrase>
			<phrase>Good job</phrase>
		</concept>
		
		<concept label="wrong">
			<phrase>Not quite...</phrase>
			<phrase>Almost...</phrase>
			<phrase>Sorry...</phrase>
			<phrase>Try again?</phrase>
		</concept>
		<!-- end tutor concepts. -->
		
		
		<!-- student concepts. -->
		
		<!-- these match against external (MessageAnnotator) annotations. -->
		<concept label="yes" type="annotation">
			<phrase>AFFIRMATIVE</phrase>
		</concept>
		
		<concept label="no" type="annotation">
			<phrase>NEGATIVE</phrase>
		</concept>
		
		<!-- these match against regular expressions. -->
		
		<concept label="concept-1-right-answer" type="regex">
			<phrase>71</phrase>
			<phrase>seventy-one</phrase>
			<phrase>seventy one</phrase>
		</concept>
		
		<concept label="concept-2-right-answer" type="regex">
			<phrase>199</phrase>
			<phrase>one ninety nine</phrase>
			<phrase>one hundred ninety nine</phrase>
			<phrase>one nine nine</phrase>
		</concept>
		
		
		
		<!-- end student concepts. -->
		
	</concepts>
	
	
	<script>
		<goal name="start" difficulty="0">
			
			<step>
				<initiation>introduction</initiation>
			</step>
			
			<step>
				<!-- Every step begins with an initiating concept or literal phrase -->
				<initiation>ask-concept-1</initiation>
				
				<!-- These are the "response" options. 
					If the concept between the tags matches the student statement, 
				    the "say" concept/phrase will be delivered by the tutor.
				    "push" adds another goal to the dialogue's stack. 
					 Note that goals should NOT be recursively nested. -->
				
				<response push="concept_2" say="ok">concept-1-right-answer</response>
                
				<!-- unanticipated-response is special: it's anything that doesn't match one of the above. -->
				<response push="concept_1_help" say="wrong">unanticipated-response</response>
			</step>
			
			
			<step>
				<initiation>conclusion</initiation>
			</step>
			
			<step>
				<initiation>Okay, let’s get started. I’m here to listen how you think through the problem, and help you as much as you want. To begin with, talk through your plan with me, and then as you proceed through the implementation, continue to go through your thought process with me.</initiation>
			</step>
		</goal>
		
		<!-- Goals are referenced by their names. "difficulty" is meaningless for now. -->
		
		<goal name="concept_2" difficulty="0">
			<step>
				<initiation>ask-concept-2</initiation>
                <response say="ok">concept-2-right-answer</response>
                <response push="concept_2_help" say="wrong">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_1_help" difficulty="0">
			<step>
				<initiation>concept-1-help</initiation>
				<response push="concept_2" say="ok">concept-1-right-answer</response>
				<response push="concept_2" say="explain-concept-1">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_2_help" difficulty="0">
			<step>
				<initiation>concept-2-help</initiation>
				<response say="ok">concept-2-right-answer</response>
				<response say="explain-concept-2">unanticipated-response</response>
			</step>
		</goal>
		
	</script>

</scenario>
