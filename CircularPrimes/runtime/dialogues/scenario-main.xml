<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scenario SYSTEM "TuTalkScenario.dtd">
<scenario default-language="en" scenario-name="scenario-main">


	<!-- 
	Concept 1: taking input from args, and turning it into an int
	Concept 2: iterating up to n
	Concept 3: calling an isCircularPrime method
	Concept 4: iterating over the numbers to test to see if they're circular primes
	 -->

	<configuration>

	</configuration>
		
	<concepts>
		<!-- this is a special kind of concept for catching unexpected student responses -->
		<concept label="unanticipated-response">
			<phrase>anything else</phrase>
		</concept>
		
		
		<!-- tutor concepts. -->
		<!-- the tutor will choose randomly between multiple phrases for a concept. -->	

		<concept label="introduction">
			<phrase>Your main method takes an input of n.</phrase>
		</concept>
		
		<concept label="conclusion">
			<phrase>Good work. Let's move on to the next part of your plan.</phrase>
		</concept>
		
		<concept label="ask-concept-1">
			<phrase>How will you access it and what form should it be in?</phrase>
		</concept>
		
		<concept label="ask-concept-2">
			<phrase>One you have your int n, what will you do with it?</phrase>
		</concept>
		
		<concept label="ask-concept-3">
			<phrase>What other methods will you call from your main method?</phrase>
		</concept>
		
		<concept label="ask-concept-4">
			<phrase>How will you know which numbers to test to see if it's a circular prime?</phrase>
		</concept>
		
		<concept label="concept-1-help">
			<phrase>Think about what form the input takes, and how you need to use it. How do you read the input, and how do you transform it?</phrase>
		</concept>
		
		<concept label="concept-2-help">
			<phrase>Remember, n is an iteger indicating the index of the circular prime you want to return. How will you know when you've found n circular primes?</phrase>
		</concept>
		
		<concept label="concept-3-help">
			<phrase>You'll need to check if numbers are circular primes. Since you'll be doing that repeatedly, it's a good idea to separate it out into a separate method.</phrase>
		</concept>
		
		<concept label="concept-4-help">
			<phrase>You'll have to look at each possible number until you find the right number of circular primes. How will you do that?</phrase>
		</concept>
		
		<concept label="explain-concept-1">
			<phrase>The input is a list of string arguments, and can be accessed using args[0].
You'll want to use it as an int, though, so you should call something like:
int n = Integer.parseInt(args[0]); </phrase>
		</concept>
		
		<concept label="explain-concept-2">
			<phrase>You should make a counter that starts at 0 and iterates up to n. Increment it each time you find a circular prime.</phrase>
		</concept>
		
		<concept label="explain-concept-3">
			<phrase>You'll need to call a different method called isCircularPrime (or something similar) that returns a boolean(True or False).</phrase>
		</concept>
		
		<concept label="explain-concept-4">
			<phrase>You need a second counter to iterate from 0, indicating the number to test using your method to test circular primes.</phrase>
		</concept>
		
		<concept label="ok">
			<phrase>Okay</phrase>
			<phrase>Good</phrase>
			<phrase>Great</phrase>
			<phrase>Correct!</phrase>
			<phrase>Wonderful</phrase>
			<phrase>Perfect</phrase>
			<phrase>Exactly</phrase>
			<phrase>You're right</phrase>
			<phrase>Spot on</phrase>
			<phrase>Good work</phrase>
			<phrase>That's correct</phrase>
			<phrase>Good job</phrase>
		</concept>
		
		<concept label="wrong">
			<phrase>Not quite...</phrase>
			<phrase>Almost...</phrase>
			<phrase>Sorry...</phrase>
			<phrase>Try again?</phrase>
		</concept>
		<!-- end tutor concepts. -->
		
		
		<!-- student concepts. -->
		
		<!-- these match against external (MessageAnnotator) annotations. -->
		<concept label="yes" type="annotation">
			<phrase>AFFIRMATIVE</phrase>
		</concept>
		
		<concept label="no" type="annotation">
			<phrase>NEGATIVE</phrase>
		</concept>
		
		<concept label="concept-1-right-answer" type="annotation">
			<phrase>MAIN_ARGUMENT</phrase>
		</concept>
		
		<concept label="concept-2-right-answer" type="annotation">
			<phrase>MAIN_ITER_N</phrase>
		</concept>
		
		<concept label="concept-3-right-answer" type="annotation">
			<phrase>MAIN_CIRCULAR_PRIMES</phrase>
		</concept>
		
		<concept label="concept-4-right-answer" type="annotation">
			<phrase>MAIN_ITER_ALL</phrase>
		</concept>
		
		
		
		<!-- end student concepts. -->
		
	</concepts>
	
	
	<script>
		<goal name="start" difficulty="0">
			
			<!--   <step>-->
				<!-- OPTIONAL INTRODUCTION  -->
				<!--   <initiation>introduction</initiation>
			</step> -->
			
			<step>
				<!-- Every step begins with an initiating concept or literal phrase -->
				<initiation>ask-concept-1</initiation>
				
				<!-- These are the "response" options. 
					If the concept between the tags matches the student statement, 
				    the "say" concept/phrase will be delivered by the tutor.
				    "push" adds another goal to the dialogue's stack. 
					 Note that goals should NOT be recursively nested. -->
				
				<response push="concept_2" say="ok">concept-1-right-answer</response>
                
				<!-- unanticipated-response is special: it's anything that doesn't match one of the above. -->
				<response push="concept_1_help" say="wrong">unanticipated-response</response>
			</step>
			
			
			<step>
				<initiation>conclusion</initiation>
			</step>
		</goal>
		
		<!-- Goals are referenced by their names. "difficulty" is meaningless for now. -->
		
		<goal name="concept_2" difficulty="0">
			<step>
				<initiation>ask-concept-2</initiation>
                <response push="concept_3" say="ok">concept-2-right-answer</response>
                <response push="concept_2_help" say="wrong">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_3" difficulty="0">
			<step>
				<initiation>ask-concept-3</initiation>
                <response push="concept_4" say="ok">concept-3-right-answer</response>
                <response push="concept_3_help" say="wrong">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_4" difficulty="0">
			<step>
				<initiation>ask-concept-4</initiation>
                <response say="ok">concept-4-right-answer</response>
                <response push="concept_4_help" say="wrong">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_1_help" difficulty="0">
			<step>
				<initiation>concept-1-help</initiation>
				<response push="concept_2" say="ok">concept-1-right-answer</response>
				<response push="concept_2" say="explain-concept-1">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_2_help" difficulty="0">
			<step>
				<initiation>concept-2-help</initiation>
				<response push="concept_3" say="ok">concept-2-right-answer</response>
				<response push="concept_3" say="explain-concept-2">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_3_help" difficulty="0">
			<step>
				<initiation>concept-3-help</initiation>
				<response push="concept_4" say="ok">concept-3-right-answer</response>
				<response push="concept_4" say="explain-concept-3">unanticipated-response</response>
			</step>
		</goal>
		
		<goal name="concept_4_help" difficulty="0">
			<step>
				<initiation>concept-4-help</initiation>
				<response say="ok">concept-4-right-answer</response>
				<response say="explain-concept-2">unanticipated-response</response>
			</step>
		</goal>
		
	</script>

</scenario>
