<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scenario SYSTEM "TuTalkScenario.dtd">
<scenario default-language="en" scenario-name="instructions-review">
	<configuration>
		
		<!-- It *is* possible to hook up a LightSide classifier to TuTalk, 
		such that the predicted labels are treated as concepts. 
		but not today. -->

	</configuration>
	
	<!-- 'Concepts' define things that students might say,
	     AND things that the tutor might say back. 
	     Tutor concepts should take the form of phrase lists.
		 Student concepts can be phrase lists, 
		 regular expressions, or lists of annotations,
	     but only one of these at a time. -->
		
	<concepts>
		<!-- this is a special kind of concept for catching unexpected student responses -->
		<concept label="unanticipated-response">
			<phrase>anything else</phrase>
		</concept>
		
		
		<!-- tutor concepts. -->
		<!-- the tutor will choose randomly between multiple phrases for a concept. -->	

		<concept label="introduction">
			<phrase>Let’s make sure you understand the problem by going through our three test cases.</phrase>
		</concept>
		
		<concept label="test-case-0">
			<phrase>You saw in the instructions that if you input 0, it should print 2.</phrase>
		</concept>
		
		<concept label="test-case-1">
			<phrase>What happens if you input 9?</phrase>
		</concept>
		
		<concept label="test-case-2">
			<phrase>How about an input of 16?</phrase>
		</concept>
		
		<concept label="index">
			<phrase>Remember, we’re using 0-indexing. Give it another try.</phrase>
		</concept>
		
		<concept label="ok">
			<phrase>Okay</phrase>
			<phrase>Good</phrase>
			<phrase>Great</phrase>
			<phrase>Correct!</phrase>
		</concept>
		<!-- end tutor concepts. -->
		
		
		<!-- student concepts. -->
		
		<!-- these match against external (MessageAnnotator) annotations. -->
		<concept label="yes" type="annotation">
			<phrase>AFFIRMATIVE</phrase>
		</concept>
		
		<concept label="no" type="annotation">
			<phrase>NEGATIVE</phrase>
		</concept>
		
		<!-- these match against regular expressions. -->
		
		
		<!-- end student concepts. -->
		
	</concepts>
	
	
	<script>
		<goal name="start" difficulty="1">
			
			<!--   <step>-->
				<!-- deliver a statement from the concept named "introduction"  -->
				<!--   <initiation>introduction</initiation>
			</step> -->
			
			<step>
				<!-- Every step begins with an initiating concept or literal phrase -->
				<initiation>introduction</initiation>
				
				<!-- These are the "response" options. 
					If the concept between the tags matches the student statement, 
				    the "say" concept/phrase will be delivered by the tutor.
				    "push" adds another goal to the dialogue's stack. 
					 Note that goals should NOT be recursively nested. -->
				
				<response push="test_case_1" say="test-case-0">yes</response>
                
				<!-- unanticipated-response is special: it's anything that doesn't match one of the above. -->
				<response push="indexing" say="idx">unanticipated-response</response>
			</step>
			
			
			<step>
				<initiation>Let's get started!</initiation>
			</step>
		</goal>
		
		<!-- Goals are referenced by their names. "difficulty" is meaningless for now. -->
		<goal name="test_case_1" difficulty="0">
			<step>
				<initiation>test-case-1</initiation>
                <response push="test_case_2" say="ok">71</response>
                <response push="indexing" say="wrong">37</response>
			</step>
		</goal>
		
		<goal name="test_case_2" difficulty="0">
			<step>
				<initiation>test-case-2</initiation>
                <response say="ok">199</response>
                <response push="indexing" say="wrong">197</response>
			</step>
		</goal>
		
		<goal name="indexing" difficulty="0">
			<step>
				<initiation>index</initiation>
				<response say="ok">71</response>
                <response say="ok">199</response>
			</step>
		</goal>
		
		
	</script>

</scenario>
