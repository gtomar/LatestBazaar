/*
 *  Copyright (c), 2009 Carnegie Mellon University.
 *  All rights reserved.
 *  
 *  Use in source and binary forms, with or without modifications, are permitted
 *  provided that that following conditions are met:
 *  
 *  1. Source code must retain the above copyright notice, this list of
 *  conditions and the following disclaimer.
 *  
 *  2. Binary form must reproduce the above copyright notice, this list of
 *  conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  
 *  Permission to redistribute source and binary forms, with or without
 *  modifications, for any purpose must be obtained from the authors.
 *  Contact Rohit Kumar (rohitk@cs.cmu.edu) for such permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND
 *  ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 *  NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/*
 * ComponentPanel.java
 *
 * Created on May 21, 2009, 5:09:24 PM
 */
package edu.cmu.cs.lti.basilica2.ui;

import edu.cmu.cs.lti.basilica2.core.Component;
import edu.cmu.cs.lti.basilica2.core.Event;
import edu.cmu.cs.lti.basilica2.observers.ComponentObserver;
import edu.cmu.cs.lti.basilica2.observers.ObserverEvent;
import edu.cmu.cs.lti.basilica2.ui.eventtable.EventTable;
import edu.cmu.cs.lti.basilica2.ui.eventtable.EventTableModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author rohitk
 */
public class ComponentPanel extends javax.swing.JPanel implements ComponentObserver {

    Component myComponent;
    EventTable myEventTable;
    EventTableModel myEventTableModel;

    /** Creates new form ComponentPanel */
    public ComponentPanel(Component c) {
        myComponent = c;
        this.setName(c.getName() + ".ui.panel");
        myEventTable = new EventTable();
        myEventTableModel = new EventTableModel();
        myEventTable.setModel(myEventTableModel);
        initComponents();
        myEventTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                tableSelectionChanged();
            }
        });
        myComponent.addObserver(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainSplitPanel = new javax.swing.JSplitPane();
        topPanel = new javax.swing.JPanel();
        textScroller = new javax.swing.JScrollPane();
        eventInfoTextArea = new javax.swing.JTextArea();
        mainScroller = new javax.swing.JScrollPane(myEventTable);

        setLayout(new java.awt.BorderLayout());

        mainSplitPanel.setDividerLocation(150);
        mainSplitPanel.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        topPanel.setLayout(new java.awt.BorderLayout());

        textScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        eventInfoTextArea.setColumns(20);
        eventInfoTextArea.setLineWrap(true);
        eventInfoTextArea.setRows(5);
        eventInfoTextArea.setWrapStyleWord(true);
        textScroller.setViewportView(eventInfoTextArea);

        topPanel.add(textScroller, java.awt.BorderLayout.CENTER);

        mainSplitPanel.setTopComponent(topPanel);
        mainSplitPanel.setBottomComponent(mainScroller);

        add(mainSplitPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tableSelectionChanged() {
        int r = myEventTable.getSelectedRow();
        if (r != -1) {
            Event e = myEventTableModel.getEvent(r);
            String s = e.toString().replace("/>", "/>\n");
            int l1 = 0;
            while ((l1 = s.indexOf("</", l1)) > 0) {
                int l2 = s.indexOf(">", l1);
                s = s.substring(0, l2 + 1) + "\n" + s.substring(l2 + 1);
                l1 = l2 + 1;
            }
            this.eventInfoTextArea.setText("<event from=" + e.getSender().getName() + ">\n" + s + "</event>");
        } else {
            this.eventInfoTextArea.setText("");
        }
    }

    public void eventReceived(Component c, Event e) {
        myEventTableModel.addRow(e);
        myEventTable.setModel(myEventTableModel);
    }

    public void eventSent(Component c, Event e) {
        myEventTableModel.addRow(e);
        myEventTable.setModel(myEventTableModel);
    }

    public void inform(Component c, String information) {
        myEventTableModel.addRow(new ObserverEvent(c, information));
        myEventTable.setModel(myEventTableModel);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea eventInfoTextArea;
    private javax.swing.JScrollPane mainScroller;
    private javax.swing.JSplitPane mainSplitPanel;
    private javax.swing.JScrollPane textScroller;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
